Divide & Conquer

1. 문제가 몇개로 나누어지는지				 a
2. 분할 후 문제의 크기				n\b
3. 각 문제마다 정복단계에서 걸리는 시간			n^d

에 대해

1. d > logba라면,  O(n^d)이다.
2. d < logba라면,  O(n^logba)이다.
3. d = logba라면,  O(n^d logn)이다.

a,b,d에 대하여 각 단계에서

0	1	1
1	a	b	n^d
2	a^2	b^2	n^d
.
.
.
m	a^m	b^m	=a^m * (n^d)/ (b^m) 이므로 [m = log(b)(n)]
-> n^d * (a/b)^m
-> n^d * b^n 이다.
등비수열의 합 공식을 이용하면 (Sn = a(r^n-1)/(r-1)) 
a : n^d
r : a/b
Sn = 
n^d * {(a/b)^(log(n)) -1 } 
---------------------
 (a/b) -1

= n^d *{  n^log(b)(a) -1 } 
---------------------
 (a/b) -1

?=  n^d *  n^log(b)(a) 
와 같다.
n^d = f(n), n^log(b)(a) = h(n)이라고 했을 때,
두 가지의 크기를 비교하여 f가 크면 1번 h가 크면 2번을 사용한다. (n으로써 나타나지 않을 때를 대비한 것.) [시간 복잡도 고려]
1. d > logba O(n^d)
2. d < logba O(n^logba)
3. d = logba O(n^d logn)

단, f= h일 경우, 시간복잡도를 고려해 나온 ?= n^d *  n^log(b)(a)를 생각하지 않고 밑에 예제를 생각해보아야 한다.
3. d = logba O(n^d logn)

a : 2
b : 2
d : 1
0	1	1
1	2	2	n
2	4	4	n
m	2^m	2^m	n

n*log(b)(n)

a : 9	27
b : 3	3
d : 2	3
0	1	1	
1	9	3	3n^2
2	27	9	3n^2
m	3^2m	3^m	3n^2

?=	3*m*n^2
?= log(b)(n) * n^d이다.

즉 일반적으로 각 단계에서의 시간 복잡도가 일정하므로, 단계의 합인 log(n)과 단계에서의 시간 복잡도인 n^d를 곱한 값이
시간 복잡도 이다.

